ASpaceImport::Importer.importer :digital_objects do
  
  require_relative '../lib/csv_importer'
  include ASpaceImport::CSVImport
  
  
  def self.profile
    "Import Digital Object Records from a CSV file"
  end


  def self.configure 
    {
      # 1. Map the cell data to schemas / handlers
      
      'digital_object_title' => 'digital_object.title',
      'digital_object_id' => 'digital_object.digital_object_id',
      
      'digital_object_cataloged_note' => 'collection_management.cataloged_note',
      
      'date_1_label' => 'date_1.label',
      'date_1_expression' => 'date_1.expression',
      'date_1_begin' => 'date_1.begin',
      'date_1_end' => 'date_1.end',
      'date_1_type' => 'date_1.date_type',
      
      'date_2_label' => 'date_2.label',
      'date_2_expression' => 'date_2.expression',
      'date_2_begin' => 'date_2.begin',
      'date_2_end' => 'date_2.end',
      'date_2_type' => 'date_2.date_type',
      
      'extent_type' => 'extent.extent_type',
      'extent_container_summary' => 'extent.container_summary',
      'extent_number' => 'extent.number',
      
      # 2. Define data handlers
      #    :record_type of the schema (if other than the handler key)
      #    :path - shortcut to forward the created object to another one
      #    :defaults - hash which maps property keys to default values if nothing shows up in the source date
      #    :on_row_complete - Proc to run whenever a row in the CSV table is complete
      #        param 1 is the set of objects generated by the row
      #        param 2 is an object in the row (of the type described in the handler)
      
      :digital_object => {
        :on_row_complete => Proc.new { |queue, dobj|
          if (cm = queue.find {|obj| obj.class.record_type == 'collection_management'})
            dobj.collection_management = cm
          end
        }
      },
    
      :date_1 => {
        :path => 'digital_object.dates', 
        :record_type => :date, 
        :defaults => date_defaults,
      },
      
      :date_2 => {
        :path => 'digital_object.dates', 
        :record_type => :date, 
        :defaults => date_defaults,
      },
      
      :extent => {
        :path => 'digital_object.extents',
        :defaults => {:portion => 'whole'}
      },

      
    }

  end
  
  
  private
  
  def self.date_defaults
    {
      :label => 'other',
      :date_type => 'single',
      :begin => '1900'
    }
  end


end


    

